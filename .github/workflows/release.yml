name: Release

on:
  push:
    tags:
      - 'v*'

env:
  ELECTRON_CACHE: .cache/electron
  ELECTRON_BUILDER_CACHE: .cache/electron-builder

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: previoustag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 HEAD^)" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "changelog<<CHANGELOG_EOF" >> "$GITHUB_OUTPUT"
          echo "**Full Changelog**: https://github.com/pierr3/TrackAudio/compare/${{ steps.previoustag.outputs.tag }}...${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "CHANGELOG_EOF" >> "$GITHUB_OUTPUT"

      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ github.ref_name }}
          body: |
            ### INSERT RELEASE NOTES ###

            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release # Make build job wait for release creation
    runs-on: ${{ matrix.os }}
    environment: Release
    strategy:
      matrix:
        os: [windows-2022] # Windows, macOS, and Linux
        arch: [x64]
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout submodules
        shell: bash
        run: |
          git submodule update --init --remote backend/vcpkg
          git submodule update --init --remote backend/extern/afv-native
          git submodule update --init --remote backend/extern/libuiohook
          cd backend/extern/afv-native
          git checkout develop-trackaudio
          cd ../libuiohook
          git checkout unregister-hook-when-debugging

      - name: Restore cache
        id: restore-cache
        uses: ./.github/actions/restore-cache
        with:
          backend: 'true'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'

      - name: Update cmake (non-macOS)
        if: matrix.os != 'macos-latest'
        run: |
          pip install cmake
          cmake --version

      - name: Setup environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew upgrade cmake
          cmake --version

      - name: Install macOS codesign certificates
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERT_DATA }}
          p12-password: ${{ secrets.APPLE_CERT_PASSWORD }}

      # Windows build steps
      - name: Build backend (Windows)
        if: matrix.os == 'windows-2022' && steps.restore-cache.outputs.backend != 'true'
        run: |
          npm -g i cmake-js
          cd backend/
          npm install
          cmake-js compile -B Release -a x64
          node custom_build.mjs
          npm pack
          cd ..
          npm install ./backend/trackaudio-afv-1.0.0.tgz

      - name: Install cached backend (Windows)
        if: matrix.os == 'windows-2022' && steps.restore-cache.outputs.backend == 'true'
        run: npm install ./backend/trackaudio-afv-1.0.0.tgz

      # macOS build steps
      - name: Build backend (macOS)
        if: matrix.os == 'macos-latest' && steps.restore-cache.outputs.backend != 'true'
        run: |
          npm -g i cmake-js
          cd backend/
          npm install
          cmake-js compile -B Release -a x64
          node custom_build.mjs
          npm pack
          cd ..
          npm install ./backend/trackaudio-afv-1.0.0.tgz

      - name: Install cached backend (macOS)
        if: matrix.os == 'macos-latest' && steps.restore-cache.outputs.backend == 'true'
        run: npm install ./backend/trackaudio-afv-1.0.0.tgz

      # Linux build steps
      - name: Build backend (Linux)
        if: matrix.os == 'ubuntu-latest' && steps.restore-cache.outputs.backend != 'true'
        run: |
          npm -g i cmake-js
          cd backend/
          npm install
          cmake-js compile -B Release -a x64
          node custom_build.mjs
          npm pack
          cd ..
          npm install ./backend/trackaudio-afv-1.0.0.tgz

      - name: Install cached backend (Linux)
        if: matrix.os == 'ubuntu-latest' && steps.restore-cache.outputs.backend == 'true'
        run: npm install ./backend/trackaudio-afv-1.0.0.tgz

      # Package and publish steps remain the same
      - name: Package and publish Windows app
        if: matrix.os == 'windows-2022'
        shell: bash
        run: npm run build:win -- --publish=always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package app for macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_API_KEY: './.a.p8'
          APPLE_API_KEY_ID: ${{ secrets.APPLE_CERT_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_CERT_ISSUER }}
        run: |
          cat << EOF > ./.a.p8
          ${{ secrets.APPLE_CERT_KEY }}
          EOF
          npm run build:mac -- --${{ matrix.arch }} --publish=never
          rm ./.a.p8

      - name: Package app for Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: npm run build:linux -- --${{ matrix.arch }} --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename macOS installer to human friendly name
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        run: |
          cd dist/
          dmg_file=$(find . -name "*.dmg" -type f)
          new_dmg_file=$(echo $dmg_file | sed 's/arm64/apple-silicon/')
          mv $dmg_file $new_dmg_file

      # -----------------------------
      # For macOS and Linux, retrieve release info and manually attach artifacts.
      - id: relinfo
        if: matrix.os != 'windows-2022'
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: pierr3/TrackAudio
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts for macOS
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relinfo.outputs.release }}
          files: 'dist/*.dmg'

      - name: Upload artifacts for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relinfo.outputs.release }}
          files: |
            dist/*.deb
            dist/*.AppImage
            dist/*.zsync
            dist/*.snap
