name: Release

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    environment: Release

    strategy:
      matrix:
        os: [windows-2022] # Temporarily windows-only
        arch: [x64]
        node-version: [20.x]
        # exclude:  # Not needed while only running Windows
        #   - os: windows-2022
        #     arch: arm64
        #   - os: ubuntu-latest
        #     arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout submodules
        shell: bash
        run: |
          git submodule update --init --remote backend/vcpkg
          git submodule update --init --remote backend/extern/afv-native
          git submodule update --init --remote backend/extern/libuiohook
          cd backend/extern/afv-native
          git checkout develop-trackaudio
          cd ../libuiohook
          git checkout unregister-hook-when-debugging

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'

      - name: Update cmake (non-macOS)
        if: matrix.os != 'macos-latest'
        run: |
          pip install cmake
          cmake --version

      - name: Setup macOS environment
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew upgrade cmake
          cmake --version

      - name: Install macOS codesign certificates
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERT_DATA }}
          p12-password: ${{ secrets.APPLE_CERT_PASSWORD }}

      - name: Install SFML dependencies (Ubuntu x64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev pkg-config libxtst-dev libxinerama-dev libx11-xcb-dev libxkbcommon-dev libxkbcommon-x11-dev libxkbfile-dev libxt-dev

      - name: Install dependencies and build backend (x64)
        if: matrix.arch == 'x64'
        run: |
          npm -g i cmake-js
          cd backend/
          npm install
          cmake-js compile -B Release -a x64
          node custom_build.mjs
          npm pack
          cd ..
          npm install ./backend/trackaudio-afv-1.0.0.tgz
          npm install

      - name: Install dependencies and build backend (macOS arm64)
        if: matrix.arch == 'arm64' && matrix.os == 'macos-latest'
        run: |
          npm -g i cmake-js
          cd backend/
          npm install
          cmake-js compile -B Release -a arm64
          node custom_build.mjs
          npm pack
          cd ..
          npm install ./backend/trackaudio-afv-1.0.0.tgz
          npm install

      - name: Install macOS notarization tools
        if: matrix.os == 'macos-latest'
        run: |
          cat << EOF > ./.a.p8
          ${{ secrets.APPLE_API_KEY }}
          EOF

      # Package apps for different platforms
      - name: Package Windows app
        if: matrix.os == 'windows-2022'
        shell: bash
        run: npm run build:win:publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package macOS app
        if: matrix.os == 'macos-latest'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_API_KEY: './.a.p8'
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          npm run build:mac -- --${{ matrix.arch }}
          rm ./.a.p8

      - name: Package Linux app
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: npm run build:linux -- --${{ matrix.arch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Rename macOS arm64 installer
      - name: Rename macOS arm64 installer
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          cd dist/
          dmg_file=$(find . -name "*.dmg" -type f)
          new_dmg_file=$(echo $dmg_file | sed 's/arm64/apple-silicon/')
          mv $dmg_file $new_dmg_file

      # Get release info
      - id: relinfo
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: pierr3/TrackAudio
          token: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts for each platform
      - name: Upload Windows artifacts
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'windows-2022'
        with:
          tag_name: ${{ steps.relinfo.outputs.release }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/latest.yml

      - name: Upload macOS artifacts
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'macos-latest'
        with:
          tag_name: ${{ steps.relinfo.outputs.release }}
          files: 'dist/*.dmg'

      - name: Upload Linux artifacts
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          tag_name: ${{ steps.relinfo.outputs.release }}
          files: |
            dist/*.deb
            dist/*.AppImage
            dist/*.zsync
            dist/*.snap
